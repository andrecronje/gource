// Code generated by protoc-gen-go. DO NOT EDIT.
// source: block.proto

/*
Package poset is a generated protocol buffer package.

It is generated from these files:
	block.proto
	event.proto
	flagTableWrapper.proto
	frame.proto
	root.proto
	roundInfo.proto

It has these top-level messages:
	BlockBody
	WireBlockSignature
	Block
	InternalTransaction
	BlockSignature
	EventBody
	EventMessage
	FlagTableWrapper
	Frame
	RootEvent
	Root
	RoundEvent
	RoundInfoMessage
*/
package poset

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type BlockBody struct {
	Index         int64    `protobuf:"varint,1,opt,name=Index,json=index" json:"Index,omitempty"`
	RoundReceived int64    `protobuf:"varint,2,opt,name=RoundReceived,json=roundReceived" json:"RoundReceived,omitempty"`
	Transactions  [][]byte `protobuf:"bytes,5,rep,name=Transactions,json=transactions,proto3" json:"Transactions,omitempty"`
}

func (m *BlockBody) Reset()                    { *m = BlockBody{} }
func (m *BlockBody) String() string            { return proto.CompactTextString(m) }
func (*BlockBody) ProtoMessage()               {}
func (*BlockBody) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *BlockBody) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *BlockBody) GetRoundReceived() int64 {
	if m != nil {
		return m.RoundReceived
	}
	return 0
}

func (m *BlockBody) GetTransactions() [][]byte {
	if m != nil {
		return m.Transactions
	}
	return nil
}

type WireBlockSignature struct {
	Index     int64  `protobuf:"varint,1,opt,name=Index,json=index" json:"Index,omitempty"`
	Signature string `protobuf:"bytes,2,opt,name=Signature,json=signature" json:"Signature,omitempty"`
}

func (m *WireBlockSignature) Reset()                    { *m = WireBlockSignature{} }
func (m *WireBlockSignature) String() string            { return proto.CompactTextString(m) }
func (*WireBlockSignature) ProtoMessage()               {}
func (*WireBlockSignature) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *WireBlockSignature) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *WireBlockSignature) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

type Block struct {
	Body       *BlockBody        `protobuf:"bytes,1,opt,name=Body,json=body" json:"Body,omitempty"`
	Signatures map[string]string `protobuf:"bytes,2,rep,name=Signatures,json=signatures" json:"Signatures,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Hash       []byte            `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`
	Hex        string            `protobuf:"bytes,4,opt,name=hex" json:"hex,omitempty"`
	StateHash  []byte            `protobuf:"bytes,5,opt,name=StateHash,json=stateHash,proto3" json:"StateHash,omitempty"`
	FrameHash  []byte            `protobuf:"bytes,6,opt,name=FrameHash,json=frameHash,proto3" json:"FrameHash,omitempty"`
}

func (m *Block) Reset()                    { *m = Block{} }
func (m *Block) String() string            { return proto.CompactTextString(m) }
func (*Block) ProtoMessage()               {}
func (*Block) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Block) GetBody() *BlockBody {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *Block) GetSignatures() map[string]string {
	if m != nil {
		return m.Signatures
	}
	return nil
}

func (m *Block) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *Block) GetHex() string {
	if m != nil {
		return m.Hex
	}
	return ""
}

func (m *Block) GetStateHash() []byte {
	if m != nil {
		return m.StateHash
	}
	return nil
}

func (m *Block) GetFrameHash() []byte {
	if m != nil {
		return m.FrameHash
	}
	return nil
}

func init() {
	proto.RegisterType((*BlockBody)(nil), "poset.BlockBody")
	proto.RegisterType((*WireBlockSignature)(nil), "poset.WireBlockSignature")
	proto.RegisterType((*Block)(nil), "poset.Block")
}

func init() { proto.RegisterFile("block.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 299 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x51, 0x3d, 0x6b, 0xc3, 0x30,
	0x14, 0xc4, 0x1f, 0x0a, 0xe8, 0xc5, 0xa1, 0x41, 0x74, 0x10, 0x25, 0x83, 0x31, 0x19, 0x3c, 0x79,
	0x48, 0x97, 0x52, 0xda, 0x25, 0xd0, 0x92, 0xae, 0x6a, 0xa1, 0xb3, 0x62, 0xab, 0xb5, 0x71, 0x2a,
	0x05, 0x49, 0x0e, 0xc9, 0x7f, 0xe8, 0x8f, 0x2e, 0x92, 0xb1, 0x6b, 0x0a, 0xdd, 0x9e, 0xee, 0xce,
	0xef, 0xee, 0x9e, 0x61, 0xbe, 0x3f, 0xa8, 0xb2, 0x2d, 0x8e, 0x5a, 0x59, 0x45, 0xd0, 0x51, 0x19,
	0x61, 0xb3, 0x16, 0xf0, 0xd6, 0xa1, 0x5b, 0x55, 0x5d, 0xc8, 0x35, 0xa0, 0x17, 0x59, 0x89, 0x33,
	0x0d, 0xd2, 0x20, 0x8f, 0x18, 0x6a, 0xdc, 0x83, 0xac, 0x61, 0xc1, 0x54, 0x27, 0x2b, 0x26, 0x4a,
	0xd1, 0x9c, 0x44, 0x45, 0x43, 0xcf, 0x2e, 0xf4, 0x14, 0x24, 0x19, 0x24, 0x6f, 0x9a, 0x4b, 0xc3,
	0x4b, 0xdb, 0x28, 0x69, 0x28, 0x4a, 0xa3, 0x3c, 0x61, 0x89, 0x9d, 0x60, 0xd9, 0x0e, 0xc8, 0x7b,
	0xa3, 0x85, 0x37, 0x7c, 0x6d, 0x3e, 0x25, 0xb7, 0x9d, 0x16, 0xff, 0xb8, 0xae, 0x00, 0x8f, 0x12,
	0xef, 0x88, 0x19, 0x36, 0x03, 0x90, 0x7d, 0x87, 0x80, 0xfc, 0x1a, 0xb2, 0x86, 0xd8, 0x65, 0xf7,
	0x1f, 0xcf, 0x37, 0xcb, 0xc2, 0xd7, 0x2a, 0xc6, 0x4e, 0x2c, 0xde, 0xbb, 0x66, 0x0f, 0x00, 0xe3,
	0x36, 0x43, 0xc3, 0x34, 0xca, 0xe7, 0x9b, 0xd5, 0x54, 0x5b, 0xfc, 0xd2, 0x4f, 0xd2, 0xea, 0x0b,
	0x83, 0xd1, 0xcc, 0x10, 0x02, 0x71, 0xcd, 0x4d, 0x4d, 0xa3, 0x34, 0xc8, 0x13, 0xe6, 0x67, 0xb2,
	0x84, 0xa8, 0x16, 0x67, 0x1a, 0xfb, 0x64, 0x6e, 0xf4, 0x89, 0x2d, 0xb7, 0x62, 0xe7, 0xa4, 0xc8,
	0x4b, 0xb1, 0x19, 0x00, 0xc7, 0x3e, 0x6b, 0xfe, 0xd5, 0xb3, 0xb3, 0x9e, 0xfd, 0x18, 0x80, 0x9b,
	0x47, 0xb8, 0xfa, 0x13, 0xc0, 0x19, 0xb4, 0xa2, 0xef, 0x85, 0x99, 0x1b, 0xdd, 0xa1, 0x4e, 0xfc,
	0xd0, 0x0d, 0xe7, 0xe8, 0x1f, 0xf7, 0xe1, 0x5d, 0xb0, 0x9f, 0xf9, 0x7f, 0x7a, 0xfb, 0x13, 0x00,
	0x00, 0xff, 0xff, 0x7a, 0x56, 0xd2, 0xdc, 0xe2, 0x01, 0x00, 0x00,
}
