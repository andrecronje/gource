// Code generated by protoc-gen-go. DO NOT EDIT.
// source: roundInfo.proto

package poset

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Trilean int32

const (
	Trilean_UNDEFINED Trilean = 0
	Trilean_TRUE      Trilean = 1
	Trilean_FALSE     Trilean = 2
)

var Trilean_name = map[int32]string{
	0: "UNDEFINED",
	1: "TRUE",
	2: "FALSE",
}
var Trilean_value = map[string]int32{
	"UNDEFINED": 0,
	"TRUE":      1,
	"FALSE":     2,
}

func (x Trilean) String() string {
	return proto.EnumName(Trilean_name, int32(x))
}
func (Trilean) EnumDescriptor() ([]byte, []int) { return fileDescriptor5, []int{0} }

type RoundEvent struct {
	Consensus bool    `protobuf:"varint,1,opt,name=Consensus,json=consensus" json:"Consensus,omitempty"`
	Witness   bool    `protobuf:"varint,2,opt,name=Witness,json=witness" json:"Witness,omitempty"`
	Famous    Trilean `protobuf:"varint,3,opt,name=Famous,json=famous,enum=poset.Trilean" json:"Famous,omitempty"`
}

func (m *RoundEvent) Reset()                    { *m = RoundEvent{} }
func (m *RoundEvent) String() string            { return proto.CompactTextString(m) }
func (*RoundEvent) ProtoMessage()               {}
func (*RoundEvent) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{0} }

func (m *RoundEvent) GetConsensus() bool {
	if m != nil {
		return m.Consensus
	}
	return false
}

func (m *RoundEvent) GetWitness() bool {
	if m != nil {
		return m.Witness
	}
	return false
}

func (m *RoundEvent) GetFamous() Trilean {
	if m != nil {
		return m.Famous
	}
	return Trilean_UNDEFINED
}

type RoundInfoMessage struct {
	Events map[string]*RoundEvent `protobuf:"bytes,1,rep,name=Events,json=events" json:"Events,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Queued bool                   `protobuf:"varint,2,opt,name=queued" json:"queued,omitempty"`
}

func (m *RoundInfoMessage) Reset()                    { *m = RoundInfoMessage{} }
func (m *RoundInfoMessage) String() string            { return proto.CompactTextString(m) }
func (*RoundInfoMessage) ProtoMessage()               {}
func (*RoundInfoMessage) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{1} }

func (m *RoundInfoMessage) GetEvents() map[string]*RoundEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

func (m *RoundInfoMessage) GetQueued() bool {
	if m != nil {
		return m.Queued
	}
	return false
}

func init() {
	proto.RegisterType((*RoundEvent)(nil), "poset.RoundEvent")
	proto.RegisterType((*RoundInfoMessage)(nil), "poset.RoundInfoMessage")
	proto.RegisterEnum("poset.Trilean", Trilean_name, Trilean_value)
}

func init() { proto.RegisterFile("roundInfo.proto", fileDescriptor5) }

var fileDescriptor5 = []byte{
	// 280 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x90, 0xc1, 0x4b, 0xc3, 0x30,
	0x14, 0xc6, 0x4d, 0x6b, 0xd3, 0xf5, 0x15, 0x67, 0xcd, 0x41, 0x8a, 0x78, 0x18, 0x13, 0xb4, 0x08,
	0xf6, 0x50, 0x2f, 0xa2, 0x27, 0x71, 0x29, 0x0c, 0xe6, 0x0e, 0x71, 0xc3, 0x73, 0x75, 0x6f, 0x32,
	0xac, 0xc9, 0x6c, 0x9a, 0xc9, 0xfe, 0x30, 0xff, 0x3f, 0x69, 0xda, 0xc1, 0xf0, 0x96, 0x2f, 0xbf,
	0xef, 0xcb, 0xf7, 0x5e, 0xe0, 0xb8, 0x52, 0x46, 0x2e, 0xc6, 0x72, 0xa9, 0xd2, 0x75, 0xa5, 0x6a,
	0xc5, 0xbc, 0xb5, 0xd2, 0x58, 0x0f, 0x4b, 0x00, 0xd1, 0x10, 0xbe, 0x41, 0x59, 0xb3, 0x73, 0x08,
	0x9e, 0x94, 0xd4, 0x28, 0xb5, 0xd1, 0x31, 0x19, 0x90, 0xa4, 0x27, 0x82, 0xf7, 0xdd, 0x05, 0x8b,
	0xc1, 0x7f, 0x5d, 0xd5, 0x12, 0xb5, 0x8e, 0x1d, 0xcb, 0xfc, 0x9f, 0x56, 0xb2, 0x4b, 0xa0, 0x79,
	0xf1, 0xa5, 0x8c, 0x8e, 0xdd, 0x01, 0x49, 0xfa, 0x59, 0x3f, 0xb5, 0xaf, 0xa7, 0xb3, 0x6a, 0x55,
	0x62, 0x21, 0x05, 0x5d, 0x5a, 0x3a, 0xfc, 0x25, 0x10, 0x89, 0xdd, 0x20, 0xcf, 0xa8, 0x75, 0xf1,
	0x81, 0xec, 0x01, 0xa8, 0x6d, 0x6f, 0x1a, 0xdd, 0x24, 0xcc, 0x2e, 0xba, 0xf0, 0x7f, 0x63, 0xda,
	0xba, 0xb8, 0xac, 0xab, 0xad, 0xa0, 0x68, 0x05, 0x3b, 0x05, 0xfa, 0x6d, 0xd0, 0xe0, 0xa2, 0x1b,
	0xa9, 0x53, 0x67, 0x13, 0x08, 0xf7, 0xec, 0x2c, 0x02, 0xf7, 0x13, 0xb7, 0x76, 0xa5, 0x40, 0x34,
	0x47, 0x76, 0x05, 0xde, 0xa6, 0x28, 0x0d, 0xda, 0x5c, 0x98, 0x9d, 0xec, 0x97, 0xda, 0xa4, 0x68,
	0xf9, 0xbd, 0x73, 0x47, 0xae, 0x6f, 0xc0, 0xef, 0x56, 0x61, 0x47, 0x10, 0xcc, 0xa7, 0x23, 0x9e,
	0x8f, 0xa7, 0x7c, 0x14, 0x1d, 0xb0, 0x1e, 0x1c, 0xce, 0xc4, 0x9c, 0x47, 0x84, 0x05, 0xe0, 0xe5,
	0x8f, 0x93, 0x17, 0x1e, 0x39, 0x6f, 0xd4, 0x7e, 0xf1, 0xed, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x0e, 0xe3, 0x35, 0x38, 0x75, 0x01, 0x00, 0x00,
}
